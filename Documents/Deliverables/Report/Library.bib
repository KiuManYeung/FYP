
@misc{noauthor_call_2022,
	title = {Call stack},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Call_stack&oldid=1078532188},
	abstract = {In computer science, a call stack is a stack data structure that stores information about the active subroutines of a computer program.  This kind of stack is also known as an execution stack, program stack, control stack, run-time stack, or machine stack, and is often shortened to just "the stack". Although maintenance of the call stack is important for the proper functioning of most software, the details are normally hidden and automatic in high-level programming languages. Many computer instruction sets provide special instructions for manipulating stacks.
A call stack is used for several related purposes, but the main reason for having one is to keep track of the point to which each active subroutine should return control when it finishes executing. An active subroutine is one that has been called, but is yet to complete execution, after which control should be handed back to the point of call. Such activations of subroutines may be nested to any level (recursive as a special case), hence the stack structure. For example, if a subroutine DrawSquare calls a subroutine DrawLine from four different places, DrawLine must know where to return when its execution completes. To accomplish this, the address following the instruction that jumps to DrawLine, the return address, is pushed onto the top of the call stack with each call.},
	language = {en},
	urldate = {2022-04-25},
	journal = {Wikipedia},
	month = mar,
	year = {2022},
	note = {Page Version ID: 1078532188},
}

@misc{guo_python_nodate,
	title = {Python {Tutor} - {Visualize} {Python}, {Java}, {C}, {C}++, {JavaScript}, {TypeScript}, and {Ruby} code execution},
	url = {https://pythontutor.com/},
	urldate = {2022-04-25},
	author = {Guo, Philip},
	file = {Python Tutor - Visualize Python, Java, C, C++, JavaScript, TypeScript, and Ruby code execution:C\:\\Users\\Saena\\Zotero\\storage\\45JVT8EG\\pythontutor.com.html:text/html},
}

@misc{python_software_foundation_ast_nodate,
	title = {ast — {Abstract} {Syntax} {Trees} — {Python} 3.10.4 documentation},
	url = {https://docs.python.org/3/library/ast.html},
	urldate = {2022-04-25},
	author = {{Python Software Foundation}},
	file = {ast — Abstract Syntax Trees — Python 3.10.4 documentation:C\:\\Users\\Saena\\Zotero\\storage\\FWQPIZIA\\ast.html:text/html},
}

@misc{att_research_and_lucent_bell_labs_graphviz_nodate,
	title = {Graphviz},
	url = {https://graphviz.org/},
	abstract = {Graph Visualization Software},
	language = {en},
	urldate = {2022-04-25},
	journal = {Graphviz},
	author = {{AT\&T Research and Lucent Bell Labs}},
}

@misc{noauthor_dot_2022,
	title = {{DOT} (graph description language)},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=DOT_(graph_description_language)&oldid=1072201904},
	abstract = {DOT is a graph description language. DOT graphs are typically files with the filename extension gv or dot. The extension gv is preferred, to avoid confusion with the extension dot used by versions of Microsoft Word before 2007.Various programs can process DOT files.  Some, such as dot, neato, twopi, circo, fdp, and sfdp, can read a DOT file and render it in graphical form.  Others, such as gvpr, gc, acyclic, ccomps, sccmap, and tred, read DOT files and perform calculations on the represented graph. Finally, others, such as lefty, dotty, and grappa, provide an interactive interface. The GVedit tool combines a text editor with noninteractive image viewer. Most programs are part of the Graphviz package or use it internally.},
	language = {en},
	urldate = {2022-04-25},
	journal = {Wikipedia},
	month = feb,
	year = {2022},
	note = {Page Version ID: 1072201904},
}

@misc{bank_graphviz_2022,
	title = {Graphviz},
	copyright = {MIT},
	url = {https://github.com/xflr6/graphviz},
	abstract = {Simple Python interface for Graphviz},
	urldate = {2022-04-25},
	author = {Bank, Sebastian},
	month = apr,
	year = {2022},
	note = {original-date: 2014-01-12T17:49:29Z},
}

@misc{parr_parrtlolviz_nodate,
	title = {parrt/lolviz: {A} simple {Python} data-structure visualization tool for lists of lists, lists, dictionaries; primarily for use in {Jupyter} notebooks / presentations},
	url = {https://github.com/parrt/lolviz},
	urldate = {2022-04-25},
	author = {Parr, Terence},
}

@misc{python_software_foundation_tkinter_nodate,
	title = {tkinter — {Python} interface to {Tcl}/{Tk} — {Python} 3.10.4 documentation},
	url = {https://docs.python.org/3/library/tkinter.html},
	urldate = {2022-04-25},
	author = {{Python Software Foundation}},
	file = {tkinter — Python interface to Tcl/Tk — Python 3.10.4 documentation:C\:\\Users\\Saena\\Zotero\\storage\\XAB2MM7F\\tkinter.html:text/html},
}
